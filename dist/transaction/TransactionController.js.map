{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../../src/transaction/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport { addHexPrefix, bufferToHex } from 'ethereumjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport NetworkController from '../network/NetworkController';\n\nimport {\n  BNToHex,\n  fractionBN,\n  hexToBN,\n  normalizeTransaction,\n  safelyExecute,\n  validateTransaction,\n  isSmartContractCode,\n  handleTransactionFetch,\n} from '../util';\n\nconst MethodRegistry = require('eth-method-registry');\nconst EthQuery = require('eth-query');\nconst Transaction = require('ethereumjs-tx');\nconst random = require('uuid/v1');\nconst { BN } = require('ethereumjs-util');\nconst { Mutex } = require('await-semaphore');\n\n/**\n * @type Result\n *\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\n/**\n * @type Fetch All Options\n *\n * @property fromBlock - String containing a specific block decimal number\n * @property alethioApiKey - API key to be used to fetch token transactions\n */\nexport interface FetchAllOptions {\n  fromBlock?: string;\n  alethioApiKey?: string;\n}\n\n/**\n * @type Transaction\n *\n * Transaction representation\n *\n * @property chainId - Network ID as per EIP-155\n * @property data - Data to pass with this transaction\n * @property from - Address to send this transaction from\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property nonce - Unique number to prevent replay attacks\n * @property to - Address to send this transaction to\n * @property value - Value associated with this transaction\n */\nexport interface Transaction {\n  chainId?: number;\n  data?: string;\n  from: string;\n  gas?: string;\n  gasPrice?: string;\n  nonce?: string;\n  to?: string;\n  value?: string;\n}\n\n/**\n * @type TransactionMeta\n *\n * TransactionMeta representation\n *\n * @property error - Synthesized error information for failed transactions\n * @property id - Generated UUID associated with this transaction\n * @property networkID - Network code as per EIP-155 for this transaction\n * @property origin - Origin this transaction was sent from\n * @property rawTransaction - Hex representation of the underlying transaction\n * @property status - String status of this transaction\n * @property time - Timestamp associated with this transaction\n * @property toSmartContract - Whether transaction recipient is a smart contract\n * @property transaction - Underlying Transaction object\n * @property transactionHash - Hash of a successful transaction\n * @property blockNumber - Number of the block where the transaction has been included\n */\nexport interface TransactionMeta {\n  error?: {\n    message: string;\n    stack?: string;\n  };\n  isTransfer?: boolean;\n  transferInformation?: {\n    symbol: string;\n    contractAddress: string;\n    decimals: number;\n  };\n  id: string;\n  networkID?: string;\n  origin?: string;\n  rawTransaction?: string;\n  status: string;\n  time: number;\n  toSmartContract?: boolean;\n  transaction: Transaction;\n  transactionHash?: string;\n  blockNumber?: string;\n}\n\n/**\n * @type EtherscanTransactionMeta\n *\n * EtherscanTransactionMeta representation\n * @property blockNumber - Number of the block where the transaction has been included\n * @property timeStamp - Timestamp associated with this transaction\n * @property hash - Hash of a successful transaction\n * @property nonce - Nonce of the transaction\n * @property blockHash - Hash of the block where the transaction has been included\n * @property transactionIndex - Etherscan internal index for this transaction\n * @property from - Address to send this transaction from\n * @property to - Address to send this transaction to\n * @property gas - Gas to send with this transaction\n * @property gasPrice - Price of gas with this transaction\n * @property isError - Synthesized error information for failed transactions\n * @property txreceipt_status - Receipt status for this transaction\n * @property input - input of the transaction\n * @property contractAddress - Address of the contract\n * @property cumulativeGasUsed - Amount of gas used\n * @property confirmations - Number of confirmations\n *\n */\nexport interface EtherscanTransactionMeta {\n  blockNumber: string;\n  timeStamp: string;\n  hash: string;\n  nonce: string;\n  blockHash: string;\n  transactionIndex: string;\n  from: string;\n  to: string;\n  value: string;\n  gas: string;\n  gasPrice: string;\n  isError: string;\n  txreceipt_status: string;\n  input: string;\n  contractAddress: string;\n  cumulativeGasUsed: string;\n  gasUsed: string;\n  confirmations: string;\n}\n\nexport interface AlethioTransactionMeta {\n  attributes: {\n    blockCreationTime: string;\n    symbol: string;\n    decimals: number;\n    transactionGasLimit: string;\n    transactionGasPrice: string;\n    transactionGasUsed: string;\n    value: string;\n  };\n  relationships: {\n    to: { data: { id: string } };\n    from: { data: { id: string } };\n    token: { data: { id: string } };\n    transaction: { data: { id: string } };\n  };\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n *\n * @property interval - Polling interval used to fetch new currency rate\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\nexport interface TransactionConfig extends BaseConfig {\n  interval: number;\n  provider: any;\n  sign?: (transaction: Transaction, from: string) => Promise<any>;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n *\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport interface MethodData {\n  registryMethod: string;\n  parsedRegistryMethod: Record<string, unknown>;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n *\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\nexport interface TransactionState extends BaseState {\n  transactions: TransactionMeta[];\n  methodData: { [key: string]: MethodData };\n}\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * Controller responsible for submitting and managing transactions\n */\nexport class TransactionController extends BaseController<TransactionConfig, TransactionState> {\n  private ethQuery: any;\n\n  private registry: any;\n\n  private handle?: NodeJS.Timer;\n\n  private mutex = new Mutex();\n\n  private failTransaction(transactionMeta: TransactionMeta, error: Error) {\n    transactionMeta.status = 'failed';\n    transactionMeta.error = error;\n    this.updateTransaction(transactionMeta);\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n  }\n\n  private query(method: string, args: any[] = []): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.ethQuery[method](...args, (error: Error, result: any) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  private async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n\n  /**\n   * Normalizes the transaction information from etherscan\n   * to be compatible with the TransactionMeta interface\n   *\n   * @param txMeta - Object containing the transaction information\n   * @param currentNetworkID - string representing the current network id\n   * @returns - TransactionMeta\n   */\n  private normalizeTxFromEtherscan(txMeta: EtherscanTransactionMeta, currentNetworkID: string): TransactionMeta {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n    /* istanbul ignore next */\n    const status = txMeta.isError === '0' ? 'confirmed' : 'failed';\n    return {\n      blockNumber: txMeta.blockNumber,\n      id: random({ msecs: time }),\n      networkID: currentNetworkID,\n      status,\n      time,\n      transaction: {\n        data: txMeta.input,\n        from: txMeta.from,\n        gas: BNToHex(new BN(txMeta.gas)),\n        gasPrice: BNToHex(new BN(txMeta.gasPrice)),\n        nonce: BNToHex(new BN(txMeta.nonce)),\n        to: txMeta.to,\n        value: BNToHex(new BN(txMeta.value)),\n      },\n      transactionHash: txMeta.hash,\n    };\n  }\n\n  /**\n   * Normalizes the transaction information from alethio\n   * to be compatible with the TransactionMeta interface\n   *\n   * @param txMeta - Object containing the transaction information\n   * @param currentNetworkID - string representing the current network id\n   * @returns - TransactionMeta\n   */\n  normalizeTxFromAlehio = (txMeta: AlethioTransactionMeta, currentNetworkID: string): TransactionMeta => {\n    const {\n      attributes: { symbol, blockCreationTime, decimals, transactionGasLimit, transactionGasPrice, value },\n      relationships: { to, from, transaction, token },\n    } = txMeta;\n    const time = parseInt(blockCreationTime, 10) * 1000;\n    return {\n      id: random({ msecs: time }),\n      isTransfer: true,\n      networkID: currentNetworkID,\n      status: 'confirmed',\n      time: parseInt(blockCreationTime, 10) * 1000,\n      transaction: {\n        chainId: 1,\n        from: from.data.id,\n        gas: transactionGasLimit,\n        gasPrice: transactionGasPrice,\n        to: to.data.id,\n        value,\n      },\n      transactionHash: transaction.data.id,\n      transferInformation: {\n        contractAddress: token.data.id,\n        decimals,\n        symbol,\n      },\n    };\n  };\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'TransactionController';\n\n  /**\n   * List of required sibling controllers this controller needs to function\n   */\n  requiredControllers = ['NetworkController'];\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (transaction: Transaction, from: string) => Promise<void>;\n\n  /**\n   * Creates a TransactionController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<TransactionConfig>, state?: Partial<TransactionState>) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 5000,\n      provider: undefined,\n    };\n    this.defaultState = {\n      methodData: {},\n      transactions: [],\n    };\n    this.initialize();\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval used to fetch new transaction statuses\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.queryTransactionStatuses());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Handle new method data request\n   *\n   * @param fourBytePrefix - String corresponding to method prefix\n   * @returns - Promise resolving to method data object corresponding to signature prefix\n   */\n  async handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find((knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix);\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update({ methodData: { ...methodData, ...{ [fourBytePrefix]: registry } } });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param transaction - Transaction object to add\n   * @param origin - Domain origin to append to the generated TransactionMeta\n   * @returns - Object containing a promise resolving to the transaction hash if approved\n   */\n  async addTransaction(transaction: Transaction, origin?: string): Promise<Result> {\n    const network = this.context.NetworkController as NetworkController;\n    const { transactions } = this.state;\n    transaction = normalizeTransaction(transaction);\n    validateTransaction(transaction);\n\n    const networkID = network?.state?.provider?.chainId;\n\n    const transactionMeta = {\n      id: random(),\n      networkID,\n      origin,\n      status: 'unapproved',\n      time: Date.now(),\n      transaction,\n    };\n\n    //\n    if (!transaction.gas || !transaction.gasPrice) {\n      try {\n        const { gas, gasPrice } = await this.estimateGas(transaction);\n        transaction.gas = gas;\n        transaction.gasPrice = gasPrice;\n      } catch (error) {\n        this.failTransaction(transactionMeta, error);\n        return Promise.reject(error);\n      }\n    }\n\n    const result: Promise<string> = new Promise((resolve, reject) => {\n      this.hub.once(`${transactionMeta.id}:finished`, (meta: TransactionMeta) => {\n        switch (meta.status) {\n          case 'submitted':\n            return resolve(meta.transactionHash);\n          case 'rejected':\n            return reject(ethErrors.provider.userRejectedRequest('User rejected the transaction'));\n          case 'cancelled':\n            return reject(ethErrors.rpc.internal('User cancelled the transaction'));\n          case 'failed':\n            return reject(ethErrors.rpc.internal(meta.error!.message));\n          /* istanbul ignore next */\n          default:\n            return reject(ethErrors.rpc.internal(`MetaMask Tx Signature: Unknown problem: ${JSON.stringify(meta)}`));\n        }\n      });\n    });\n\n    transactions.push(transactionMeta);\n    this.update({ transactions: [...transactions] });\n    this.hub.emit(`unapprovedTransaction`, transactionMeta);\n    return { result, transactionMeta };\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionID - ID of the transaction to approve\n   * @returns - Promise resolving when this operation completes\n   */\n  async approveTransaction(transactionID: string) {\n    const { transactions } = this.state;\n    const releaseLock = await this.mutex.acquire();\n    const network = this.context.NetworkController as NetworkController;\n    /* istanbul ignore next */\n    const currentChainId = network?.state?.provider?.chainId;\n    const index = transactions.findIndex(({ id }) => transactionID === id);\n    const transactionMeta = transactions[index];\n    const { from } = transactionMeta.transaction;\n\n    if (!this.sign) {\n      releaseLock();\n      this.failTransaction(transactionMeta, new Error('No sign method defined.'));\n      return;\n    } else if (!currentChainId) {\n      this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n      return;\n    }\n\n    try {\n      transactionMeta.status = 'approved';\n      transactionMeta.transaction.nonce = await this.query('getTransactionCount', [from, 'pending']);\n      transactionMeta.transaction.chainId = parseInt(currentChainId, undefined);\n\n      const ethTransaction = new Transaction({ ...transactionMeta.transaction });\n      await this.sign(ethTransaction, transactionMeta.transaction.from);\n      transactionMeta.status = 'signed';\n      this.updateTransaction(transactionMeta);\n      const rawTransaction = bufferToHex(ethTransaction.serialize());\n\n      transactionMeta.rawTransaction = rawTransaction;\n      this.updateTransaction(transactionMeta);\n      const transactionHash = await this.query('sendRawTransaction', [rawTransaction]);\n      transactionMeta.transactionHash = transactionHash;\n      transactionMeta.status = 'submitted';\n      this.updateTransaction(transactionMeta);\n      this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    } catch (error) {\n      this.failTransaction(transactionMeta, error);\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionID - ID of the transaction to cancel\n   */\n  cancelTransaction(transactionID: string) {\n    const transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);\n    if (!transactionMeta) {\n      return;\n    }\n    transactionMeta.status = 'rejected';\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    const transactions = this.state.transactions.filter(({ id }) => id !== transactionID);\n    this.update({ transactions: [...transactions] });\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionID - ID of the transaction to cancel\n   */\n  async stopTransaction(transactionID: string) {\n    const transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const existingGasPrice = transactionMeta.transaction.gasPrice;\n    /* istanbul ignore next */\n    const existingGasPriceDecimal = parseInt(existingGasPrice === undefined ? '0x0' : existingGasPrice, 16);\n    const gasPrice = addHexPrefix(`${parseInt(`${existingGasPriceDecimal * CANCEL_RATE}`, 10).toString(16)}`);\n\n    const ethTransaction = new Transaction({\n      from: transactionMeta.transaction.from,\n      gas: transactionMeta.transaction.gas,\n      gasPrice,\n      nonce: transactionMeta.transaction.nonce,\n      to: transactionMeta.transaction.from,\n      value: '0x0',\n    });\n\n    await this.sign(ethTransaction, transactionMeta.transaction.from);\n    const rawTransaction = bufferToHex(ethTransaction.serialize());\n    await this.query('sendRawTransaction', [rawTransaction]);\n    transactionMeta.status = 'cancelled';\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n  }\n\n  /**\n   * Attemps to speed up a transaction increasing transaction gasPrice by ten percent\n   *\n   * @param transactionID - ID of the transaction to speed up\n   */\n  async speedUpTransaction(transactionID: string) {\n    const transactionMeta = this.state.transactions.find(({ id }) => id === transactionID);\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const { transactions } = this.state;\n    const existingGasPrice = transactionMeta.transaction.gasPrice;\n    /* istanbul ignore next */\n    const existingGasPriceDecimal = parseInt(existingGasPrice === undefined ? '0x0' : existingGasPrice, 16);\n    const gasPrice = addHexPrefix(`${parseInt(`${existingGasPriceDecimal * SPEED_UP_RATE}`, 10).toString(16)}`);\n    const ethTransaction = new Transaction({ ...transactionMeta.transaction, gasPrice });\n    await this.sign(ethTransaction, transactionMeta.transaction.from);\n    const rawTransaction = bufferToHex(ethTransaction.serialize());\n    const transactionHash = await this.query('sendRawTransaction', [rawTransaction]);\n    const newTransactionMeta = {\n      ...transactionMeta,\n      id: random(),\n      time: Date.now(),\n      transaction: {\n        ...transactionMeta.transaction,\n        gasPrice,\n      },\n      transactionHash,\n    };\n    transactions.push(newTransactionMeta);\n    this.update({ transactions: [...transactions] });\n    this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction\n   *\n   * @param transaction - Transaction object to estimate gas for\n   * @returns - Promise resolving to an object containing gas and gasPrice\n   */\n  async estimateGas(transaction: Transaction) {\n    const estimatedTransaction = { ...transaction };\n    const { gasLimit } = await this.query('getBlockByNumber', ['latest', false]);\n    const { gas, gasPrice: providedGasPrice, to, value, data } = estimatedTransaction;\n    const gasPrice = typeof providedGasPrice === 'undefined' ? await this.query('gasPrice') : providedGasPrice;\n\n    // 1. If gas is already defined on the transaction, use it\n    if (typeof gas !== 'undefined') {\n      return { gas, gasPrice };\n    }\n\n    // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000\n    /* istanbul ignore next */\n    const code = to ? await this.query('getCode', [to]) : undefined;\n    /* istanbul ignore next */\n    if (!to || (to && !data && (!code || code === '0x'))) {\n      return { gas: '0x5208', gasPrice };\n    }\n    // if data, should be hex string format\n    estimatedTransaction.data = !data ? data : /* istanbul ignore next */ addHexPrefix(data);\n    // 3. If this is a contract address, safely estimate gas using RPC\n    estimatedTransaction.value = typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n    const gasLimitBN = hexToBN(gasLimit);\n    estimatedTransaction.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n    const gasHex = await this.query('estimateGas', [estimatedTransaction]);\n\n    // 4. Pad estimated gas without exceeding the most recent block gasLimit\n    const gasBN = hexToBN(gasHex);\n    const maxGasBN = gasLimitBN.muln(0.9);\n    const paddedGasBN = gasBN.muln(1.5);\n    /* istanbul ignore next */\n    if (gasBN.gt(maxGasBN)) {\n      return { gas: addHexPrefix(gasHex), gasPrice };\n    }\n    /* istanbul ignore next */\n    if (paddedGasBN.lt(maxGasBN)) {\n      return { gas: addHexPrefix(BNToHex(paddedGasBN)), gasPrice };\n    }\n    return { gas: addHexPrefix(BNToHex(maxGasBN)), gasPrice };\n  }\n\n  /**\n   * Extension point called if and when this controller is composed\n   * with other controllers using a ComposableController\n   */\n  onComposed() {\n    super.onComposed();\n    const network = this.context.NetworkController as NetworkController;\n    const onProviderUpdate = () => {\n      this.ethQuery = network.provider ? new EthQuery(network.provider) : /* istanbul ignore next */ null;\n      this.registry = network.provider\n        ? new MethodRegistry({ provider: network.provider }) /* istanbul ignore next */\n        : null;\n    };\n    onProviderUpdate();\n    network.subscribe(onProviderUpdate);\n  }\n\n  /**\n   * Resiliently checks all submitted transactions on the blockchain\n   * and verifies that it has been included in a block\n   * when that happens, the tx status is updated to confirmed\n   *\n   * @returns - Promise resolving when this operation completes\n   */\n  async queryTransactionStatuses() {\n    const { transactions } = this.state;\n    const network = this.context.NetworkController;\n    const currentNetworkID = network.state.provider.chainId;\n    let gotUpdates = false;\n    await safelyExecute(() =>\n      Promise.all(\n        transactions.map(async (meta, index) => {\n          if (meta.status === 'submitted' && meta.networkID === currentNetworkID) {\n            const txObj = await this.query('getTransactionByHash', [meta.transactionHash]);\n            /* istanbul ignore else */\n            if (txObj && txObj.blockNumber) {\n              transactions[index].status = 'confirmed';\n              this.hub.emit(`${meta.id}:confirmed`, meta);\n              gotUpdates = true;\n            }\n          }\n        }),\n      ),\n    );\n    /* istanbul ignore else */\n    if (gotUpdates) {\n      this.update({ transactions: [...transactions] });\n    }\n  }\n\n  /**\n   * Updates an existing transaction in state\n   *\n   * @param transactionMeta - New transaction meta to store in state\n   */\n  updateTransaction(transactionMeta: TransactionMeta) {\n    const { transactions } = this.state;\n    transactionMeta.transaction = normalizeTransaction(transactionMeta.transaction);\n    validateTransaction(transactionMeta.transaction);\n    const index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n    transactions[index] = transactionMeta;\n    this.update({ transactions: [...transactions] });\n  }\n\n  /**\n   * Removes all transactions from state, optionally based on the current network\n   *\n   * @param ignoreNetwork - Ignores network\n   */\n  wipeTransactions(ignoreNetwork?: boolean) {\n    /* istanbul ignore next */\n    if (ignoreNetwork) {\n      this.update({ transactions: [] });\n      return;\n    }\n    const network = this.context.NetworkController as NetworkController;\n    if (!network) {\n      return;\n    }\n    const currentNetworkID = network.state.provider.chainId;\n    const newTransactions = this.state.transactions.filter(({ networkID }) => networkID !== currentNetworkID);\n    this.update({ transactions: newTransactions });\n  }\n\n  /**\n   * Gets all transactions from etherscan for a specific address\n   * optionally starting from a specific block\n   *\n   * @param address - string representing the address to fetch the transactions from\n   * @param opt - Object containing optional data, fromBlock and Alethio API key\n   * @returns - Promise resolving to an string containing the block number of the latest incoming transaction.\n   */\n  async fetchAll(address: string, opt?: FetchAllOptions): Promise<string | void> {\n    const network = this.context.NetworkController;\n    const {\n      state: {\n        network: currentNetworkID,\n        provider: { type: networkType },\n      },\n    } = network;\n\n    const supportedNetworkIds = ['1', '3', '4', '42'];\n    /* istanbul ignore next */\n    if (supportedNetworkIds.indexOf(currentNetworkID) === -1) {\n      return;\n    }\n\n    const [etherscanResponse, alethioResponse] = await handleTransactionFetch(networkType, address, opt);\n    const remoteTxList: { [key: string]: number } = {};\n    const remoteTxs: TransactionMeta[] = [];\n\n    etherscanResponse.result.forEach((tx: EtherscanTransactionMeta) => {\n      /* istanbul ignore next */\n      if (!remoteTxList[tx.hash]) {\n        remoteTxs.push(this.normalizeTxFromEtherscan(tx, currentNetworkID));\n        remoteTxList[tx.hash] = 1;\n      }\n    });\n\n    alethioResponse.data.forEach((tx: AlethioTransactionMeta) => {\n      const cleanTx = this.normalizeTxFromAlehio(tx, currentNetworkID);\n      remoteTxs.push(cleanTx);\n      /* istanbul ignore next */\n      remoteTxList[cleanTx.transactionHash || ''] = 1;\n    });\n\n    const localTxs = this.state.transactions.filter(\n      /* istanbul ignore next */\n      (tx: TransactionMeta) => !remoteTxList[`${tx.transactionHash}`],\n    );\n\n    const allTxs = [...remoteTxs, ...localTxs];\n    allTxs.sort((a, b) => (a.time < b.time ? -1 : 1));\n\n    let latestIncomingTxBlockNumber: string | undefined;\n    allTxs.forEach(async (tx) => {\n      /* istanbul ignore next */\n      if (\n        tx.networkID === currentNetworkID &&\n        tx.transaction.to &&\n        tx.transaction.to.toLowerCase() === address.toLowerCase()\n      ) {\n        if (\n          tx.blockNumber &&\n          (!latestIncomingTxBlockNumber || parseInt(latestIncomingTxBlockNumber, 10) < parseInt(tx.blockNumber, 10))\n        ) {\n          latestIncomingTxBlockNumber = tx.blockNumber;\n        }\n      }\n      /* istanbul ignore else */\n      if (tx.toSmartContract === undefined) {\n        // If not `to` is a contract deploy, if not `data` is send eth\n        if (tx.transaction.to && (!tx.transaction.data || tx.transaction.data !== '0x')) {\n          const code = await this.query('getCode', [tx.transaction.to]);\n          tx.toSmartContract = isSmartContractCode(code);\n        } else {\n          tx.toSmartContract = false;\n        }\n      }\n    });\n    // Update state only if new transactions were fetched\n    if (allTxs.length > this.state.transactions.length) {\n      this.update({ transactions: allTxs });\n    }\n    return latestIncomingTxBlockNumber;\n  }\n}\n\nexport default TransactionController;\n"]}