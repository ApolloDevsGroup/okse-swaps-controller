{"version":3,"file":"NetworkStatusController.js","sourceRoot":"","sources":["../../src/network/NetworkStatusController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sDAA0E;AAC1E,kCAAqD;AAyCrD,MAAM,mBAAmB,GAAkB;IACzC,KAAK,EAAE,MAAM;IACb,OAAO,EAAE,MAAM;IACf,OAAO,EAAE,MAAM;IACf,OAAO,EAAE,MAAM;CAChB,CAAC;AAEF;;GAEG;AACH,MAAa,uBAAwB,SAAQ,wBAAuD;IAQlG;;;;;OAKG;IACH,YAAY,MAAqC,EAAE,KAAmC;QACpF,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAZvB;;WAEG;QACH,SAAI,GAAG,yBAAyB,CAAC;QAU/B,IAAI,CAAC,aAAa,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG;YAClB,aAAa,EAAE;gBACb,MAAM,EAAE,mBAAmB;aAC5B;SACF,CAAC;QACF,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED;;;;OAIG;IACG,IAAI,CAAC,QAAiB;;YAC1B,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,oBAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;KAAA;IAED;;;;OAIG;IACG,kBAAkB;;YACtB,IAAI;gBACF,MAAM,IAAI,GAAG,MAAM,kBAAW,CAAC,0CAA0C,CAAC,CAAC;gBAC3E,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,0BAA0B,CAAC,mBAAmB,CAAC;aACrF;YAAC,OAAO,KAAK,EAAE;gBACd,0BAA0B;gBAC1B,OAAO,mBAAmB,CAAC;aAC5B;QACH,CAAC;KAAA;IAED;;;;OAIG;IACG,qBAAqB;;YACzB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO;aACR;YACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QAC7C,CAAC;KAAA;CACF;AAnED,0DAmEC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch } from '../util';\n\n/**\n * Network status code string\n */\nexport type Status = 'ok' | 'down' | 'degraded';\n\n/**\n * Network status object\n */\nexport interface NetworkStatus {\n  kovan: Status;\n  mainnet: Status;\n  rinkeby: Status;\n  ropsten: Status;\n}\n\n/**\n * @type NetworkStatusConfig\n *\n * Network status controller configuration\n *\n * @property interval - Polling interval used to fetch network status\n */\nexport interface NetworkStatusConfig extends BaseConfig {\n  interval: number;\n}\n\n/**\n * @type NetworkStatusState\n *\n * Network status controller state\n *\n * @property networkStatus - Providers mapped to network status objects\n */\nexport interface NetworkStatusState extends BaseState {\n  networkStatus: {\n    infura: NetworkStatus;\n  };\n}\n\nconst DOWN_NETWORK_STATUS: NetworkStatus = {\n  kovan: 'down',\n  mainnet: 'down',\n  rinkeby: 'down',\n  ropsten: 'down',\n};\n\n/**\n * Controller that passively polls on a set interval for network status of providers\n */\nexport class NetworkStatusController extends BaseController<NetworkStatusConfig, NetworkStatusState> {\n  private handle?: NodeJS.Timer;\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'NetworkStatusController';\n\n  /**\n   * Creates a NetworkStatusController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<NetworkStatusConfig>, state?: Partial<NetworkStatusState>) {\n    super(config, state);\n    this.defaultConfig = { interval: 180000 };\n    this.defaultState = {\n      networkStatus: {\n        infura: DOWN_NETWORK_STATUS,\n      },\n    };\n    this.initialize();\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval used to fetch network status\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateNetworkStatuses());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Fetches infura network status\n   *\n   * @returns - Promise resolving to an infura network status object\n   */\n  async updateInfuraStatus(): Promise<NetworkStatus> {\n    try {\n      const json = await handleFetch('https://api.infura.io/v1/status/metamask');\n      return json && json.mainnet ? json : /* istanbul ignore next */ DOWN_NETWORK_STATUS;\n    } catch (error) {\n      /* istanbul ignore next */\n      return DOWN_NETWORK_STATUS;\n    }\n  }\n\n  /**\n   * Updates network status for all providers\n   *\n   * @returns - Promise resolving when this operation completes\n   */\n  async updateNetworkStatuses() {\n    if (this.disabled) {\n      return;\n    }\n    const infura = await this.updateInfuraStatus();\n    this.update({ networkStatus: { infura } });\n  }\n}\n\nexport default NetworkStatusController;\n"]}