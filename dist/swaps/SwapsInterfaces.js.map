{"version":3,"file":"SwapsInterfaces.js","sourceRoot":"","sources":["../../src/swaps/SwapsInterfaces.ts"],"names":[],"mappings":";;;AAGA,IAAY,OAOX;AAPD,WAAY,OAAO;IACjB,4BAAiB,CAAA;IACjB,4BAAiB,CAAA;IACjB,oCAAyB,CAAA;IACzB,wCAA6B,CAAA;IAC7B,sDAA2C,CAAA;IAC3C,oCAAyB,CAAA;AAC3B,CAAC,EAPW,OAAO,GAAP,eAAO,KAAP,eAAO,QAOlB","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { Transaction } from '../transaction/TransactionController';\n\nexport enum APIType {\n  TRADES = 'TRADES',\n  TOKENS = 'TOKENS',\n  TOP_ASSETS = 'TOP_ASSETS',\n  FEATURE_FLAG = 'FEATURE_FLAG',\n  AGGREGATOR_METADATA = 'AGGREGATOR_METADATA',\n  GAS_PRICES = 'GAS_PRICES',\n}\n\nexport interface SwapsAsset {\n  address: string;\n  symbol: string;\n  name?: string;\n}\n\nexport interface SwapsToken extends SwapsAsset {\n  decimals: number;\n  occurances?: number;\n  iconUrl?: string;\n}\n\n/**\n * Metadata needed to fetch quotes\n *\n * @interface APIFetchQuotesMetadata\n *\n * @property sourceTokenInfo - Source token information\n * @property destinationTokenInfo - Destination token information\n * @property accountBalance Current - ETH account balance\n * @property destinationTokenConversionRate - Current conversion rate to ETH of destination token\n *\n */\nexport interface APIFetchQuotesMetadata {\n  sourceTokenInfo: SwapsToken;\n  destinationTokenInfo: SwapsToken;\n  accountBalance: string;\n  destinationTokenConversionRate?: string;\n}\n\n/**\n * Parameters needed to fetch quotes\n *\n * @interface APIFetchQuotesParams\n *\n * @property slippage - Slippage\n * @property sourceToken - Source token address\n * @property sourceAmount - Source token amount\n * @property destinationToken - Destination token address\n * @property walletAddress - Address to do the swap from\n * @property exchangeList\n * @property balanceError\n * @property metaData - Metadata needed to fetch quotes\n *\n */\nexport interface APIFetchQuotesParams {\n  slippage: number;\n  sourceToken: string;\n  sourceAmount: number;\n  destinationToken: string;\n  walletAddress: string;\n  exchangeList?: string[];\n  balanceError?: boolean;\n  timeout?: number;\n}\n\n/**\n * Aggregator metadata coming from API\n *\n * @interface APIAggregatorMetadata\n *\n */\nexport interface APIAggregatorMetadata {\n  color: string;\n  title: string;\n  icon: string;\n}\n\ninterface QuoteTransaction extends Transaction {\n  value: string;\n}\n\n/**\n * Savings of a quote\n *\n * @interface QuoteSavings\n */\nexport interface QuoteSavings {\n  total: BigNumber;\n  performance: BigNumber;\n  fee: BigNumber;\n  medianMetaMaskFee: BigNumber;\n}\n\n/**\n * Trade data structure coming from API, together with savings and gas estimations.\n *\n * @interface Quote\n *\n * @property trade - The ethereum transaction data for the swap\n * @property approvalNeeded - Ethereum transaction to complete a ERC20 approval, if needed\n * @property sourceAmount - Amount in minimal unit to send\n * @property destinationAmount - Amount in minimal unit to receive\n * @property error - Trade error, if any\n * @property sourceToken - Source token address\n * @property destinationToken - Destination token address\n * @property maxGas - Maximum gas to use\n * @property averageGas - Average gas to use\n * @property estimatedRefund - Destination token address\n * @property fetchTime - Fetch time\n * @property fee - MetaMask fee\n * @property gasMultiplier\n * @property aggregator - Aggregator id\n * @property aggType - Aggregator type\n * @property priceSlippage - Price slippage information object\n * @property savings - Estimation of savings\n * @property gasEstimate - Estimation of gas\n * @property gasEstimateWithRefund - Estimation of gas with refund\n */\nexport interface Quote {\n  trade: QuoteTransaction;\n  approvalNeeded: null | {\n    data: string;\n    to: string;\n    from: string;\n    gas: string;\n  };\n  sourceAmount: string;\n  destinationAmount: number;\n  error: null | Error;\n  sourceToken: string;\n  destinationToken: string;\n  maxGas: number;\n  averageGas: number;\n  estimatedRefund: number;\n  fetchTime: number;\n  aggregator: string;\n  aggType: string;\n  fee: number;\n  gasMultiplier: number;\n  savings: QuoteSavings | null;\n  gasEstimate: string | null;\n  gasEstimateWithRefund: number | null;\n}\n\n/**\n * Fees and values information for an aggregator\n *\n * @interface QuoteValues\n *\n * @property aggregator - Aggregator id\n * @property ethFee - Fee in ETH\n * @property maxEthFee - Maximum fee in ETH\n * @property ethValueOfTokens - Total value of tokens in ETH\n * @property overallValueOfQuote\n * @property metaMaskFeeInEth - MetaMask fee in ETH\n */\nexport interface QuoteValues {\n  aggregator: string;\n  ethFee: string;\n  maxEthFee: string;\n  ethValueOfTokens: string;\n  overallValueOfQuote: string;\n  metaMaskFeeInEth: string;\n}\n"]}