{"version":3,"file":"SwapsController.js","sourceRoot":"","sources":["../../src/swaps/SwapsController.ts"],"names":[],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport AbortController from 'abort-controller';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { calcTokenAmount, estimateGas } from '../util';\nimport { Transaction } from '../transaction/TransactionController';\nimport {\n  DEFAULT_ERC20_APPROVE_GAS,\n  ETH_SWAPS_TOKEN_ADDRESS,\n  fetchTokens,\n  fetchTradesInfo,\n  SWAPS_CONTRACT_ADDRESS,\n  SwapsError,\n  getMedianEthValueQuote,\n  fetchGasPrices,\n  calculateGasEstimateWithRefund,\n} from './SwapsUtil';\nimport {\n  Quote,\n  QuoteSavings,\n  SwapsToken,\n  APIFetchQuotesParams,\n  APIFetchQuotesMetadata,\n  QuoteValues,\n} from './SwapsInterfaces';\n\nconst { Mutex } = require('await-semaphore');\nconst abiERC20 = require('human-standard-token-abi');\nconst EthQuery = require('ethjs-query');\nconst Web3 = require('web3');\n\nexport interface SwapsConfig extends BaseConfig {\n  maxGasLimit: number;\n  pollCountLimit: number;\n  metaSwapAddress: string;\n  fetchTokensThreshold: number;\n  quotePollingInterval: number;\n  provider: any;\n}\n\nexport interface SwapsState extends BaseState {\n  quotes: { [key: string]: Quote };\n  fetchParams: APIFetchQuotesParams;\n  fetchParamsMetaData: APIFetchQuotesMetadata;\n  topAggSavings: QuoteSavings | null;\n  tokens: null | SwapsToken[];\n  quotesLastFetched: null | number;\n  errorKey: null | SwapsError;\n  topAggId: null | string;\n  tokensLastFetched: number;\n  customGasPrice?: string;\n  isInPolling: boolean;\n  isInFetch: boolean;\n  pollingCyclesLeft: number;\n  approvalTransaction: Transaction | null;\n  quoteValues: { [key: string]: QuoteValues } | null;\n}\n\nconst QUOTE_POLLING_INTERVAL = 50 * 1000;\n// The MAX_GAS_LIMIT is a number that is higher than the maximum gas costs we have observed on any aggregator\nconst MAX_GAS_LIMIT = 2500000;\n\nexport class SwapsController extends BaseController<SwapsConfig, SwapsState> {\n  private handle?: NodeJS.Timer;\n\n  private web3: any;\n\n  private ethQuery: any;\n\n  private pollCount = 0;\n\n  private mutex = new Mutex();\n\n  private abortController?: AbortController;\n\n  /**\n   * Fetch current gas price\n   *\n   * @returns - Promise resolving to the current gas price\n   */\n  private async getGasPrice(): Promise<string> {\n    const { ProposeGasPrice } = await fetchGasPrices();\n    return (parseFloat(ProposeGasPrice) * 1000000000).toString(16);\n  }\n\n  /**\n   * Find best quote and quotes calculated values\n   *\n   * @param quotes - Array of quotes\n   * @param customGasPrice - If defined, custom gas price used\n   * @returns - Promise resolving to the best quote object and values from quotes\n   */\n  private async getBestQuoteAndQuotesValues(\n    quotes: { [key: string]: Quote },\n    customGasPrice?: string,\n  ): Promise<{ topAggId: string; quoteValues: { [key: string]: QuoteValues } }> {\n    let topAggId = '';\n    let overallValueOfBestQuoteForSorting: BigNumber = new BigNumber(0);\n\n    const quoteValues: { [key: string]: QuoteValues } = {};\n    const usedGasPrice = customGasPrice || (await this.getGasPrice());\n\n    const { destinationTokenInfo, destinationTokenConversionRate } = this.state.fetchParamsMetaData;\n    Object.values(quotes).forEach((quote: Quote) => {\n      const {\n        aggregator,\n        averageGas,\n        maxGas,\n        destinationAmount = 0,\n        destinationToken,\n        sourceAmount,\n        sourceToken,\n        trade,\n        gasEstimate,\n        gasEstimateWithRefund,\n        fee: metaMaskFee,\n      } = quote;\n\n      // trade gas\n      const tradeGasLimit =\n        gasEstimateWithRefund && gasEstimateWithRefund !== 0\n          ? new BigNumber(gasEstimateWithRefund)\n          : new BigNumber(averageGas || MAX_GAS_LIMIT, 10);\n      const calculatedMaxGasLimit = new BigNumber(gasEstimate || averageGas).times(1.4, 10);\n      const tradeMaxGasLimit =\n        calculatedMaxGasLimit.toNumber() > maxGas ? calculatedMaxGasLimit : new BigNumber(maxGas);\n\n      // + approval gas if required\n      const approvalGas = this.state.approvalTransaction?.gas || '0x0';\n      const totalGasLimit = tradeGasLimit.plus(approvalGas, 16);\n      const maxTotalGasLimit = tradeMaxGasLimit.plus(approvalGas, 16);\n      const totalGasInWei = totalGasLimit.times(usedGasPrice, 16);\n      const maxTotalGasInWei = maxTotalGasLimit.times(usedGasPrice, 16);\n\n      // totalGas + trade value\n      // trade.value is a sum of different values depending on the transaction.\n      // It always includes any external fees charged by the quote source. In\n      // addition, if the source asset is ETH, trade.value includes the amount\n      // of swapped ETH.\n      const totalInWei = totalGasInWei.plus(trade.value, 16);\n      const maxTotalInWei = maxTotalGasInWei.plus(trade.value, 16);\n\n      // if value in trade, ETH fee will be the gas, if not it will be the total wei\n      const weiFee = sourceToken === ETH_SWAPS_TOKEN_ADDRESS ? totalInWei.minus(sourceAmount, 10) : totalInWei; // sourceAmount is in wei : totalInWei;\n      const maxWeiFee = sourceToken === ETH_SWAPS_TOKEN_ADDRESS ? maxTotalInWei.minus(sourceAmount, 10) : maxTotalInWei; // sourceAmount is in wei : totalInWei;\n      const ethFee = calcTokenAmount(weiFee, 18);\n      const maxEthFee = calcTokenAmount(maxWeiFee, 18);\n      const decimalAdjustedDestinationAmount = calcTokenAmount(destinationAmount, destinationTokenInfo.decimals);\n\n      // fees\n\n      const tokenPercentageOfPreFeeDestAmount = new BigNumber(100, 10).minus(metaMaskFee, 10).div(100);\n      const destinationAmountBeforeMetaMaskFee = decimalAdjustedDestinationAmount.div(\n        tokenPercentageOfPreFeeDestAmount,\n      );\n      const metaMaskFeeInTokens = destinationAmountBeforeMetaMaskFee.minus(decimalAdjustedDestinationAmount);\n\n      const conversionRate = destinationTokenConversionRate || 1;\n\n      const ethValueOfTokens = decimalAdjustedDestinationAmount.times(conversionRate, 10);\n\n      // the more tokens the better\n      const overallValueOfQuote =\n        destinationToken === ETH_SWAPS_TOKEN_ADDRESS ? ethValueOfTokens.minus(ethFee, 10) : ethValueOfTokens;\n      quoteValues[aggregator] = {\n        aggregator,\n        ethFee: ethFee.toFixed(18),\n        maxEthFee: maxEthFee.toFixed(18),\n        ethValueOfTokens: ethValueOfTokens.toFixed(18),\n        overallValueOfQuote: overallValueOfQuote.toFixed(18),\n        metaMaskFeeInEth: metaMaskFeeInTokens.times(conversionRate).toFixed(18),\n      };\n\n      if (overallValueOfQuote.gt(overallValueOfBestQuoteForSorting)) {\n        topAggId = aggregator;\n        overallValueOfBestQuoteForSorting = overallValueOfQuote;\n      }\n    });\n\n    return { topAggId, quoteValues };\n  }\n\n  /**\n   * Calculate savings from quotes\n   *\n   * @param quotes - Quotes to do the calculation\n   * @param values - Swaps ETH values, all quotes fees and all quotes trade values\n   * @returns - Promise resolving to an object containing best aggregator id and respective savings\n   */\n  private async calculateSavings(quote: Quote, quoteValues: { [key: string]: QuoteValues }): Promise<QuoteSavings> {\n    const {\n      ethFee: medianEthFee,\n      metaMaskFeeInEth: medianMetaMaskFee,\n      ethValueOfTokens: medianEthValueOfTokens,\n    } = getMedianEthValueQuote(Object.values(quoteValues));\n\n    const bestTradeFee = quoteValues[quote.aggregator];\n    // Performance savings are calculated as:\n    //   (ethValueOfTokens for the best trade) - (ethValueOfTokens for the media trade)\n    const performance = new BigNumber(bestTradeFee.ethValueOfTokens, 10).minus(medianEthValueOfTokens, 10);\n\n    // Fee savings are calculated as:\n    //   (fee for the median trade) - (fee for the best trade)\n    const fee = new BigNumber(medianEthFee).minus(bestTradeFee.ethFee, 10);\n\n    const metaMaskFee = bestTradeFee.metaMaskFeeInEth;\n\n    // Total savings are calculated as:\n    //   performance savings + fee savings - metamask fee\n    const total = performance.plus(fee).minus(metaMaskFee);\n\n    return { performance, total, fee, medianMetaMaskFee: new BigNumber(medianMetaMaskFee) };\n  }\n\n  /**\n   * Get current allowance for a wallet address to access ERC20 contract address funds\n   *\n   * @param contractAddress - Hex address of the ERC20 contract\n   * @param walletAddress - Hex address of the wallet\n   * @returns - Promise resolving to allowance number\n   */\n  private async getERC20Allowance(contractAddress: string, walletAddress: string): Promise<number> {\n    const contract = this.web3.eth.contract(abiERC20).at(contractAddress);\n    return new Promise<number>((resolve, reject) => {\n      contract.allowance(walletAddress, SWAPS_CONTRACT_ADDRESS, (error: Error, result: number) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  private timedoutGasReturn(tradeTxParams: Transaction | null): Promise<{ gas: string | null }> {\n    if (!tradeTxParams) {\n      return new Promise((resolve) => {\n        resolve({ gas: null });\n      });\n    }\n\n    const gasTimeout = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ gas: null });\n      }, 5000);\n    });\n\n    return new Promise(async (resolve) => {\n      const tradeTxParamsForGasEstimate = {\n        data: tradeTxParams.data,\n        from: tradeTxParams.from,\n        to: tradeTxParams.to,\n        value: tradeTxParams.value,\n      };\n      try {\n        const gas: { gas: string | null } = (await Promise.race([\n          estimateGas(tradeTxParamsForGasEstimate, this.ethQuery),\n          gasTimeout,\n        ])) as { gas: string | null };\n        resolve(gas);\n      } catch (e) {\n        resolve({ gas: null });\n      }\n    });\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'SwapsController';\n\n  /**\n   * List of required sibling controllers this controller needs to function\n   */\n  requiredControllers = [];\n\n  /**\n   * Creates a SwapsController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<SwapsConfig>, state?: Partial<SwapsState>) {\n    super(config, state);\n    this.defaultConfig = {\n      maxGasLimit: 2500000,\n      pollCountLimit: 3,\n      metaSwapAddress: SWAPS_CONTRACT_ADDRESS,\n      fetchTokensThreshold: 1000 * 60 * 60 * 24,\n      quotePollingInterval: QUOTE_POLLING_INTERVAL,\n      provider: undefined,\n    };\n    this.defaultState = {\n      quotes: {},\n      quoteValues: {},\n      fetchParams: {\n        slippage: 0,\n        sourceToken: '',\n        sourceAmount: 0,\n        destinationToken: '',\n        walletAddress: '',\n      },\n      fetchParamsMetaData: {\n        sourceTokenInfo: {\n          decimals: 0,\n          address: '',\n          symbol: '',\n        },\n        destinationTokenInfo: {\n          decimals: 0,\n          address: '',\n          symbol: '',\n        },\n        accountBalance: '0x',\n      },\n      topAggSavings: null,\n      tokens: null,\n      approvalTransaction: null,\n      quotesLastFetched: 0,\n      errorKey: null,\n      topAggId: null,\n      tokensLastFetched: 0,\n      isInPolling: false,\n      isInFetch: false,\n      pollingCyclesLeft: config?.pollCountLimit || 3,\n    };\n\n    this.initialize();\n  }\n\n  set provider(provider: any) {\n    if (provider) {\n      this.ethQuery = new EthQuery(provider);\n      this.web3 = new Web3(provider);\n    }\n  }\n\n  /**\n   * Starts a new polling process\n   *\n   */\n  async pollForNewQuotes() {\n    // We only want to do up to a maximum of three requests from polling.\n    this.pollCount += 1;\n    if (this.pollCount < this.config.pollCountLimit + 1) {\n      this.update({ isInPolling: true, pollingCyclesLeft: this.config.pollCountLimit - this.pollCount });\n      this.handle && clearTimeout(this.handle);\n      await this.fetchAndSetQuotes();\n      this.handle = setTimeout(() => {\n        this.pollForNewQuotes();\n      }, this.config.quotePollingInterval);\n    } else {\n      this.stopPollingAndResetState(SwapsError.QUOTES_EXPIRED_ERROR);\n    }\n  }\n\n  async getAllQuotesWithGasEstimates(trades: { [key: string]: Quote }): Promise<{ [key: string]: Quote }> {\n    const quoteGasData = await Promise.all(\n      Object.values(trades).map((trade) => {\n        return new Promise<{ gas: string | null; aggId: string }>(async (resolve, reject) => {\n          try {\n            const { gas } = await this.timedoutGasReturn(trade.trade);\n            resolve({\n              gas,\n              aggId: trade.aggregator,\n            });\n          } catch (e) {\n            reject(e);\n          }\n        });\n      }),\n    );\n\n    const newQuotes: { [key: string]: Quote } = {};\n    quoteGasData.forEach(({ gas, aggId }) => {\n      newQuotes[aggId] = {\n        ...trades[aggId],\n        gasEstimate: gas,\n        gasEstimateWithRefund: calculateGasEstimateWithRefund(\n          trades[aggId].maxGas,\n          trades[aggId].estimatedRefund,\n          gas,\n        ).toNumber(),\n      };\n    });\n    return newQuotes;\n  }\n\n  async fetchAndSetQuotes(): Promise<void> {\n    const { fetchParams, customGasPrice } = this.state;\n    this.update({ isInFetch: true });\n    try {\n      /** We need to abort quotes fetch if stopPollingAndResetState is called while getting quotes */\n      this.abortController = new AbortController();\n      const { signal } = this.abortController;\n      let quotes: { [key: string]: Quote } = await fetchTradesInfo(fetchParams, signal);\n\n      if (Object.values(quotes).length === 0) {\n        throw new Error(SwapsError.QUOTES_NOT_AVAILABLE_ERROR);\n      }\n\n      const quotesLastFetched = Date.now();\n      let approvalTransaction: {\n        data?: string;\n        from: string;\n        to?: string;\n        gas?: string;\n      } | null = null;\n\n      if (fetchParams.sourceToken !== ETH_SWAPS_TOKEN_ADDRESS) {\n        const allowance = await this.getERC20Allowance(fetchParams.sourceToken, fetchParams.walletAddress);\n\n        if (Number(allowance) === 0 && this.pollCount === 1) {\n          approvalTransaction = Object.values(quotes)[0].approvalNeeded;\n          if (!approvalTransaction) {\n            throw new Error(SwapsError.ERROR_FETCHING_QUOTES);\n          }\n          const { gas: approvalGas } = await this.timedoutGasReturn({\n            data: approvalTransaction.data,\n            from: approvalTransaction.from,\n            to: approvalTransaction.to,\n          });\n\n          approvalTransaction = {\n            ...approvalTransaction,\n            gas: approvalGas || DEFAULT_ERC20_APPROVE_GAS,\n          };\n        }\n      }\n      quotes = await this.getAllQuotesWithGasEstimates(quotes);\n      const { topAggId, quoteValues } = await this.getBestQuoteAndQuotesValues(quotes, customGasPrice);\n      const savings = await this.calculateSavings(quotes[topAggId], quoteValues);\n\n      this.state.isInPolling &&\n        this.update({\n          quotes,\n          quotesLastFetched,\n          approvalTransaction,\n          topAggId: quotes[topAggId]?.aggregator,\n          topAggSavings: savings,\n          isInFetch: false,\n          quoteValues,\n        });\n    } catch (e) {\n      const error = Object.values(SwapsError).includes(e) ? e : SwapsError.ERROR_FETCHING_QUOTES;\n      this.stopPollingAndResetState(error);\n    }\n  }\n\n  startFetchAndSetQuotes(\n    fetchParams: APIFetchQuotesParams,\n    fetchParamsMetaData: APIFetchQuotesMetadata,\n    customGasPrice?: string,\n  ) {\n    if (!fetchParams) {\n      return null;\n    }\n    // Every time we get a new request that is not from the polling, we reset the poll count so we can poll for up to three more sets of quotes with these new params.\n    this.pollCount = 0;\n\n    this.update({\n      customGasPrice,\n      fetchParams,\n      fetchParamsMetaData,\n    });\n    this.pollForNewQuotes();\n  }\n\n  async fetchTokenWithCache() {\n    if (!this.state.tokens || this.config.fetchTokensThreshold < Date.now() - this.state.tokensLastFetched) {\n      const releaseLock = await this.mutex.acquire();\n      try {\n        const newTokens = await fetchTokens();\n        this.update({ tokens: newTokens, tokensLastFetched: Date.now() });\n      } finally {\n        releaseLock();\n      }\n    }\n  }\n\n  safeRefetchQuotes() {\n    const { fetchParams } = this.state;\n    if (!this.handle && fetchParams) {\n      this.fetchAndSetQuotes();\n    }\n  }\n\n  /**\n   * Stops the polling process\n   *\n   */\n  stopPollingAndResetState(error?: SwapsError) {\n    this.abortController && this.abortController.abort();\n    this.handle && clearTimeout(this.handle);\n    this.pollCount = this.config.pollCountLimit + 1;\n    this.update({\n      ...this.defaultState,\n      isInPolling: false,\n      isInFetch: false,\n      tokensLastFetched: this.state.tokensLastFetched,\n      tokens: this.state.tokens,\n      errorKey: error,\n    });\n  }\n}\n\nexport default SwapsController;\n"]}