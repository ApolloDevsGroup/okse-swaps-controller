{"version":3,"file":"SwapsUtil.js","sourceRoot":"","sources":["../../src/swaps/SwapsUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { handleFetch, timeoutFetch, constructTxParams, BNToHex } from '../util';\nimport {\n  APIAggregatorMetadata,\n  SwapsAsset,\n  SwapsToken,\n  APIType,\n  Quote,\n  APIFetchQuotesParams,\n  QuoteValues,\n} from './SwapsInterfaces';\n\nexport const ETH_SWAPS_TOKEN_ADDRESS = '0x0000000000000000000000000000000000000000';\n\nexport const ETH_SWAPS_TOKEN_OBJECT: SwapsToken = {\n  symbol: 'ETH',\n  name: 'Ether',\n  address: ETH_SWAPS_TOKEN_ADDRESS,\n  decimals: 18,\n};\n\nexport const DEFAULT_ERC20_APPROVE_GAS = '0x1d4c0';\n\n// The MAX_GAS_LIMIT is a number that is higher than the maximum gas costs we have observed on any aggregator\nconst MAX_GAS_LIMIT = 2500000;\n\nexport const SWAPS_CONTRACT_ADDRESS = '0x881d40237659c251811cec9c364ef91dc08d300c';\n\nexport enum SwapsError {\n  QUOTES_EXPIRED_ERROR = 'quotes-expired',\n  SWAP_FAILED_ERROR = 'swap-failed-error',\n  ERROR_FETCHING_QUOTES = 'error-fetching-quotes',\n  QUOTES_NOT_AVAILABLE_ERROR = 'quotes-not-available',\n  OFFLINE_FOR_MAINTENANCE = 'offline-for-maintenance',\n  SWAPS_FETCH_ORDER_CONFLICT = 'swaps-fetch-order-conflict',\n}\n\n// Functions\n\nexport const getBaseApiURL = function (type: APIType): string {\n  switch (type) {\n    case APIType.TRADES:\n      return 'https://api.metaswap.codefi.network/trades';\n    case APIType.TOKENS:\n      return 'https://api.metaswap.codefi.network/tokens';\n    case APIType.TOP_ASSETS:\n      return 'https://api.metaswap.codefi.network/topAssets';\n    case APIType.FEATURE_FLAG:\n      return 'https://api.metaswap.codefi.network/featureFlag';\n    case APIType.AGGREGATOR_METADATA:\n      return 'https://api.metaswap.codefi.network/aggregatorMetadata';\n    case APIType.GAS_PRICES:\n      return 'https://api.metaswap.codefi.network/gasPrices';\n    default:\n      throw new Error('getBaseApiURL requires an api call type');\n  }\n};\n\nexport async function fetchTradesInfo(\n  { slippage, sourceToken, sourceAmount, destinationToken, walletAddress, exchangeList }: APIFetchQuotesParams,\n  abortSignal: AbortSignal,\n): Promise<{ [key: string]: Quote }> {\n  const urlParams: APIFetchQuotesParams = {\n    destinationToken,\n    sourceToken,\n    sourceAmount,\n    slippage,\n    timeout: 10000,\n    walletAddress,\n  };\n\n  if (exchangeList) {\n    urlParams.exchangeList = exchangeList;\n  }\n\n  const tradeURL = `${getBaseApiURL(APIType.TRADES)}?${new URLSearchParams(urlParams as Record<any, any>).toString()}`;\n\n  const tradesResponse = (await timeoutFetch(tradeURL, { method: 'GET', signal: abortSignal }, 15000)) as Quote[];\n  const newQuotes = tradesResponse.reduce((aggIdTradeMap: { [key: string]: Quote }, quote: Quote) => {\n    if (quote.trade && !quote.error) {\n      const constructedTrade = constructTxParams({\n        to: quote.trade.to,\n        from: quote.trade.from,\n        data: quote.trade.data,\n        amount: BNToHex(new BigNumber(quote.trade.value)),\n        gas: BNToHex(quote.maxGas),\n      });\n\n      let { approvalNeeded } = quote;\n\n      if (approvalNeeded) {\n        approvalNeeded = constructTxParams({\n          ...approvalNeeded,\n        });\n      }\n\n      return {\n        ...aggIdTradeMap,\n        [quote.aggregator]: {\n          ...quote,\n          slippage,\n          trade: constructedTrade,\n        },\n      };\n    }\n\n    return aggIdTradeMap;\n  }, {});\n\n  return newQuotes;\n}\n\nexport async function fetchTokens(): Promise<SwapsToken[]> {\n  const tokenUrl = getBaseApiURL(APIType.TOKENS);\n  const tokens: SwapsToken[] = await handleFetch(tokenUrl, { method: 'GET' });\n  const filteredTokens = tokens.filter((token) => {\n    return token.address !== ETH_SWAPS_TOKEN_ADDRESS;\n  });\n  filteredTokens.push(ETH_SWAPS_TOKEN_OBJECT);\n  return filteredTokens;\n}\n\nexport async function fetchAggregatorMetadata() {\n  const aggregatorMetadataUrl = getBaseApiURL(APIType.AGGREGATOR_METADATA);\n  const aggregators: { [key: string]: APIAggregatorMetadata } = await handleFetch(aggregatorMetadataUrl, {\n    method: 'GET',\n  });\n  return aggregators;\n}\n\nexport async function fetchTopAssets(): Promise<SwapsAsset[]> {\n  const topAssetsUrl = getBaseApiURL(APIType.TOP_ASSETS);\n  const response: SwapsAsset[] = await handleFetch(topAssetsUrl, { method: 'GET' });\n  return response;\n}\n\nexport async function fetchSwapsFeatureLiveness(): Promise<boolean> {\n  try {\n    const status = await handleFetch(getBaseApiURL(APIType.FEATURE_FLAG), { method: 'GET' });\n    return status?.active;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function fetchTokenPrice(address: string): Promise<string> {\n  const query = `contract_addresses=${address}&vs_currencies=eth`;\n  const prices = await handleFetch(`https://api.coingecko.com/api/v3/simple/token_price/ethereum?${query}`, {\n    method: 'GET',\n  });\n  return prices && prices[address]?.eth;\n}\n\nexport async function fetchGasPrices(): Promise<{\n  SafeGasPrice: string;\n  ProposeGasPrice: string;\n  FastGasPrice: string;\n}> {\n  const prices = await handleFetch(getBaseApiURL(APIType.GAS_PRICES), {\n    method: 'GET',\n  });\n  return prices;\n}\n\nexport function calculateGasEstimateWithRefund(\n  maxGas: number | null,\n  estimatedRefund: number | null,\n  estimatedGas: string | null,\n): BigNumber {\n  const maxGasMinusRefund = new BigNumber(maxGas || MAX_GAS_LIMIT, 10).minus(estimatedRefund || 0);\n  const estimatedGasBN = new BigNumber(estimatedGas || '0');\n  const gasEstimateWithRefund = maxGasMinusRefund.lt(estimatedGasBN) ? maxGasMinusRefund : estimatedGasBN;\n  return gasEstimateWithRefund;\n}\n\n/**\n * Calculates the median of a sample of BigNumber values.\n *\n * @param {BigNumber[]} values - A sample of BigNumber values.\n * @returns {BigNumber} The median of the sample.\n */\nexport function getMedian(values: BigNumber[]) {\n  if (!Array.isArray(values) || values.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n  const sorted = [...values].sort((a, b) => {\n    if (a.eq(b)) {\n      return 0;\n    }\n    return a.lt(b) ? -1 : 1;\n  });\n\n  if (sorted.length % 2 === 1) {\n    // return middle value\n    return sorted[(sorted.length - 1) / 2];\n  }\n  // return mean of middle two values\n  const upperIndex = sorted.length / 2;\n  return sorted[upperIndex].plus(sorted[upperIndex - 1]).div(2);\n}\n\n/**\n * Calculates the median overallValueOfQuote of a sample of quotes.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth, and ethValueOfTokens properties\n * @returns {Object} An object with the ethValueOfTokens, ethFee, and metaMaskFeeInEth of the quote with the median overallValueOfQuote\n */\n\nexport function getMedianEthValueQuote(quotes: QuoteValues[]) {\n  if (!Array.isArray(quotes) || quotes.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n\n  quotes.sort((quoteA, quoteB) => {\n    const overallValueOfQuoteA = new BigNumber(quoteA.overallValueOfQuote, 10);\n    const overallValueOfQuoteB = new BigNumber(quoteB.overallValueOfQuote, 10);\n    if (overallValueOfQuoteA.eq(overallValueOfQuoteB)) {\n      return 0;\n    }\n    return overallValueOfQuoteA.lt(overallValueOfQuoteB) ? -1 : 1;\n  });\n\n  if (quotes.length % 2 === 1) {\n    // return middle values\n    const medianOverallValue = quotes[(quotes.length - 1) / 2].overallValueOfQuote;\n    const quotesMatchingMedianQuoteValue = quotes.filter((quote) => medianOverallValue === quote.overallValueOfQuote);\n    return meansOfQuotesFeesAndValue(quotesMatchingMedianQuoteValue);\n  }\n\n  // return mean of middle two values\n  const upperIndex = quotes.length / 2;\n  const lowerIndex = upperIndex - 1;\n\n  const overallValueAtUpperIndex = quotes[upperIndex].overallValueOfQuote;\n  const overallValueAtLowerIndex = quotes[lowerIndex].overallValueOfQuote;\n\n  const quotesMatchingUpperIndexValue = quotes.filter(\n    (quote) => overallValueAtUpperIndex === quote.overallValueOfQuote,\n  );\n  const quotesMatchingLowerIndexValue = quotes.filter(\n    (quote) => overallValueAtLowerIndex === quote.overallValueOfQuote,\n  );\n\n  const feesAndValueAtUpperIndex = meansOfQuotesFeesAndValue(quotesMatchingUpperIndexValue);\n  const feesAndValueAtLowerIndex = meansOfQuotesFeesAndValue(quotesMatchingLowerIndexValue);\n\n  return {\n    ethFee: new BigNumber(feesAndValueAtUpperIndex.ethFee, 10)\n      .plus(feesAndValueAtLowerIndex.ethFee, 10)\n      .dividedBy(2)\n      .toString(10),\n    metaMaskFeeInEth: new BigNumber(feesAndValueAtUpperIndex.metaMaskFeeInEth, 10)\n      .plus(feesAndValueAtLowerIndex.metaMaskFeeInEth, 10)\n      .dividedBy(2)\n      .toString(10),\n    ethValueOfTokens: new BigNumber(feesAndValueAtUpperIndex.ethValueOfTokens, 10)\n      .plus(feesAndValueAtLowerIndex.ethValueOfTokens, 10)\n      .dividedBy(2)\n      .toString(10),\n  };\n}\n\n/**\n * Calculates the arithmetic mean for each of three properties - ethFee, metaMaskFeeInEth and ethValueOfTokens - across\n * an array of objects containing those properties.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth and\n * ethValueOfTokens properties\n * @returns {Object} An object with the arithmetic mean each of the ethFee, metaMaskFeeInEth and ethValueOfTokens of\n * the passed quote objects\n */\nfunction meansOfQuotesFeesAndValue(quotes: QuoteValues[]) {\n  const feeAndValueSumsAsBigNumbers = quotes.reduce(\n    (feeAndValueSums, quote) => ({\n      ethFee: feeAndValueSums.ethFee.plus(quote.ethFee, 10),\n      metaMaskFeeInEth: feeAndValueSums.metaMaskFeeInEth.plus(quote.metaMaskFeeInEth, 10),\n      ethValueOfTokens: feeAndValueSums.ethValueOfTokens.plus(quote.ethValueOfTokens, 10),\n    }),\n    {\n      ethFee: new BigNumber(0, 10),\n      metaMaskFeeInEth: new BigNumber(0, 10),\n      ethValueOfTokens: new BigNumber(0, 10),\n    },\n  );\n\n  return {\n    ethFee: feeAndValueSumsAsBigNumbers.ethFee.div(quotes.length, 10).toString(10),\n    metaMaskFeeInEth: feeAndValueSumsAsBigNumbers.metaMaskFeeInEth.div(quotes.length, 10).toString(10),\n    ethValueOfTokens: feeAndValueSumsAsBigNumbers.ethValueOfTokens.div(quotes.length, 10).toString(10),\n  };\n}\n"]}