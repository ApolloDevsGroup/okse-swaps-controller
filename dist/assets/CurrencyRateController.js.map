{"version":3,"file":"CurrencyRateController.js","sourceRoot":"","sources":["../../src/assets/CurrencyRateController.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch } from '../util';\n\nconst { Mutex } = require('await-semaphore');\n\n/**\n * @type CurrencyRateConfig\n *\n * Currency rate controller configuration\n *\n * @property currentCurrency - Currently-active ISO 4217 currency code\n * @property interval - Polling interval used to fetch new currency rate\n * @property nativeCurrency - Symbol for the base asset used for conversion\n * @property includeUSDRate - Whether to include the usd rate in addition to the currentCurrency\n */\nexport interface CurrencyRateConfig extends BaseConfig {\n  currentCurrency: string;\n  interval: number;\n  nativeCurrency: string;\n  includeUSDRate?: boolean;\n}\n\n/**\n * @type CurrencyRateState\n *\n * Currency rate controller state\n *\n * @property conversionDate - Timestamp of conversion rate expressed in ms since UNIX epoch\n * @property conversionRate - Conversion rate from current base asset to the current currency\n * @property currentCurrency - Currently-active ISO 4217 currency code\n * @property nativeCurrency - Symbol for the base asset used for conversion\n * @property usdConversionRate - Conversion rate from usd to the current currency\n */\nexport interface CurrencyRateState extends BaseState {\n  conversionDate: number;\n  conversionRate: number;\n  currentCurrency: string;\n  nativeCurrency: string;\n  usdConversionRate?: number;\n}\n\n/**\n * Controller that passively polls on a set interval for an exchange rate from the current base\n * asset to the current currency\n */\nexport class CurrencyRateController extends BaseController<CurrencyRateConfig, CurrencyRateState> {\n  /* Optional config to include conversion to usd in all price url fetches and on state */\n  includeUSDRate?: boolean;\n\n  private activeCurrency = '';\n\n  private activeNativeCurrency = '';\n\n  private mutex = new Mutex();\n\n  private handle?: NodeJS.Timer;\n\n  private getCurrentCurrencyFromState(state?: Partial<CurrencyRateState>) {\n    return state && state.currentCurrency ? state.currentCurrency : 'usd';\n  }\n\n  private getPricingURL(currentCurrency: string, nativeCurrency: string, includeUSDRate?: boolean) {\n    return (\n      `https://min-api.cryptocompare.com/data/price?fsym=` +\n      `${nativeCurrency.toUpperCase()}&tsyms=${currentCurrency.toUpperCase()}` +\n      `${includeUSDRate && currentCurrency.toUpperCase() !== 'USD' ? ',USD' : ''}`\n    );\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'CurrencyRateController';\n\n  /**\n   * Creates a CurrencyRateController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<CurrencyRateConfig>, state?: Partial<CurrencyRateState>) {\n    super(config, state);\n    this.defaultConfig = {\n      currentCurrency: this.getCurrentCurrencyFromState(state),\n      disabled: true,\n      interval: 180000,\n      nativeCurrency: 'ETH',\n      includeUSDRate: false,\n    };\n    this.defaultState = {\n      conversionDate: 0,\n      conversionRate: 0,\n      currentCurrency: this.defaultConfig.currentCurrency,\n      nativeCurrency: this.defaultConfig.nativeCurrency,\n      usdConversionRate: 0,\n    };\n    this.initialize();\n    this.configure({ disabled: false }, false, false);\n    this.poll();\n  }\n\n  /**\n   * Sets a currency to track\n   *\n   * @param currentCurrency - ISO 4217 currency code\n   */\n  set currentCurrency(currentCurrency: string) {\n    this.activeCurrency = currentCurrency;\n    safelyExecute(() => this.updateExchangeRate());\n  }\n\n  /**\n   * Sets a new native currency\n   *\n   * @param symbol - Symbol for the base asset\n   */\n  set nativeCurrency(symbol: string) {\n    this.activeNativeCurrency = symbol;\n    safelyExecute(() => this.updateExchangeRate());\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval used to fetch new exchange rate\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateExchangeRate());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Fetches the exchange rate for a given currency\n   *\n   * @param currency - ISO 4217 currency code\n   * @param nativeCurrency - Symbol for base asset\n   * @param includeUSDRate - Whether to add the USD rate to the fetch\n   * @returns - Promise resolving to exchange rate for given currency\n   */\n  async fetchExchangeRate(currency: string, nativeCurrency = this.activeNativeCurrency, includeUSDRate?: boolean): Promise<CurrencyRateState> {\n    const json = await handleFetch(this.getPricingURL(currency, nativeCurrency, includeUSDRate));\n    const conversionRate = Number(json[currency.toUpperCase()]);\n    const usdConversionRate = Number(json.USD);\n    if (!Number.isFinite(conversionRate)) {\n      throw new Error(`Invalid response for ${currency.toUpperCase()}: ${json[currency.toUpperCase()]}`);\n    }\n    if (includeUSDRate && !Number.isFinite(usdConversionRate)) {\n      throw new Error(`Invalid response for usdConversionRate: ${json.USD}`);\n    }\n\n    return {\n      conversionDate: Date.now() / 1000,\n      conversionRate,\n      currentCurrency: currency,\n      nativeCurrency,\n      usdConversionRate,\n    };\n  }\n\n  /**\n   * Updates exchange rate for the current currency\n   *\n   * @returns Promise resolving to currency data or undefined if disabled\n   */\n  async updateExchangeRate(): Promise<CurrencyRateState | void> {\n    if (this.disabled || !this.activeCurrency || !this.activeNativeCurrency) {\n      return;\n    }\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { conversionDate, conversionRate, usdConversionRate } = await this.fetchExchangeRate(\n        this.activeCurrency,\n        this.activeNativeCurrency,\n        this.includeUSDRate,\n      );\n      const newState: CurrencyRateState = {\n        conversionDate,\n        conversionRate,\n        currentCurrency: this.activeCurrency,\n        nativeCurrency: this.activeNativeCurrency,\n        usdConversionRate: this.includeUSDRate ? usdConversionRate : this.defaultState.usdConversionRate,\n      };\n      this.update(newState);\n\n      return this.state;\n    } finally {\n      releaseLock();\n    }\n  }\n}\n\nexport default CurrencyRateController;\n"]}