{"version":3,"file":"TokenRatesController.js","sourceRoot":"","sources":["../../src/assets/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { toChecksumAddress } from 'ethereumjs-util';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute, handleFetch } from '../util';\nimport AssetsController from './AssetsController';\nimport CurrencyRateController from './CurrencyRateController';\n\n/**\n * @type CoinGeckoResponse\n *\n * CoinGecko API response representation\n *\n */\nexport interface CoinGeckoResponse {\n  [address: string]: {\n    [currency: string]: number;\n  };\n}\n\n/**\n * @type Token\n *\n * Token representation\n *\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property image - Image of the token, url or bit32 image\n */\nexport interface Token {\n  address: string;\n  decimals: number;\n  symbol: string;\n  image?: string;\n}\n\n/**\n * @type TokenRatesConfig\n *\n * Token rates controller configuration\n *\n * @property interval - Polling interval used to fetch new token rates\n * @property tokens - List of tokens to track exchange rates for\n */\nexport interface TokenRatesConfig extends BaseConfig {\n  interval: number;\n  nativeCurrency: string;\n  tokens: Token[];\n}\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n *\n * @property contractExchangeRates - Hash of token contract addresses to exchange rates\n */\nexport interface TokenRatesState extends BaseState {\n  contractExchangeRates: { [address: string]: number };\n}\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the AssetsController\n */\nexport class TokenRatesController extends BaseController<TokenRatesConfig, TokenRatesState> {\n  private handle?: NodeJS.Timer;\n\n  private tokenList: Token[] = [];\n\n  private getPricingURL(query: string) {\n    return `https://api.coingecko.com/api/v3/simple/token_price/ethereum?${query}`;\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'TokenRatesController';\n\n  /**\n   * List of required sibling controllers this controller needs to function\n   */\n  requiredControllers = ['AssetsController', 'CurrencyRateController'];\n\n  /**\n   * Creates a TokenRatesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<TokenRatesConfig>, state?: Partial<TokenRatesState>) {\n    super(config, state);\n    this.defaultConfig = {\n      disabled: true,\n      interval: 180000,\n      nativeCurrency: 'eth',\n      tokens: [],\n    };\n    this.defaultState = { contractExchangeRates: {} };\n    this.initialize();\n    this.configure({ disabled: false }, false, false);\n    this.poll();\n  }\n\n  /**\n   * Sets a new polling interval\n   *\n   * @param interval - Polling interval used to fetch new token rates\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateExchangeRates());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Sets a new token list to track prices\n   *\n   * @param tokens - List of tokens to track exchange rates for\n   */\n  set tokens(tokens: Token[]) {\n    this.tokenList = tokens;\n    !this.disabled && safelyExecute(() => this.updateExchangeRates());\n  }\n\n  /**\n   * Fetches a pairs of token address and native currency\n   *\n   * @param query - Query according to tokens in tokenList and native currency\n   * @returns - Promise resolving to exchange rates for given pairs\n   */\n  async fetchExchangeRate(query: string): Promise<CoinGeckoResponse> {\n    return handleFetch(this.getPricingURL(query));\n  }\n\n  /**\n   * Extension point called if and when this controller is composed\n   * with other controllers using a ComposableController\n   */\n  onComposed() {\n    super.onComposed();\n    const assets = this.context.AssetsController as AssetsController;\n    const currencyRate = this.context.CurrencyRateController as CurrencyRateController;\n    assets.subscribe(() => {\n      this.configure({ tokens: assets.state.tokens });\n    });\n    currencyRate.subscribe(() => {\n      this.configure({ nativeCurrency: currencyRate.state.nativeCurrency });\n    });\n  }\n\n  /**\n   * Updates exchange rates for all tokens\n   *\n   * @returns Promise resolving when this operation completes\n   */\n  async updateExchangeRates() {\n    if (this.tokenList.length === 0) {\n      return;\n    }\n    const newContractExchangeRates: { [address: string]: number } = {};\n    const { nativeCurrency } = this.config;\n    const pairs = this.tokenList.map((token) => token.address).join(',');\n    const query = `contract_addresses=${pairs}&vs_currencies=${nativeCurrency.toLowerCase()}`;\n    const prices = await this.fetchExchangeRate(query);\n    this.tokenList.forEach((token) => {\n      const address = toChecksumAddress(token.address);\n      const price = prices[token.address.toLowerCase()];\n      newContractExchangeRates[address] = price ? price[nativeCurrency.toLowerCase()] : 0;\n    });\n    this.update({ contractExchangeRates: newContractExchangeRates });\n  }\n}\n\nexport default TokenRatesController;\n"]}