{"version":3,"file":"TokenBalancesController.js","sourceRoot":"","sources":["../../src/assets/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sDAA0E;AAC1E,kCAAwC;AAKxC,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAEjC,gBAAE;AA0BX;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,wBAAuD;IAalG;;;;;OAKG;IACH,YAAY,MAAqC,EAAE,KAAmC;QACpF,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAjBvB;;WAEG;QACH,SAAI,GAAG,yBAAyB,CAAC;QAEjC;;WAEG;QACH,wBAAmB,GAAG,CAAC,0BAA0B,EAAE,kBAAkB,CAAC,CAAC;QAUrE,IAAI,CAAC,aAAa,GAAG;YACnB,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,EAAE;SACX,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,EAAE,gBAAgB,EAAE,EAAE,EAAE,CAAC;QAC7C,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED;;;;OAIG;IACG,IAAI,CAAC,QAAiB;;YAC1B,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,oBAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;KAAA;IAED;;;;OAIG;IACG,cAAc;;YAClB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO;aACR;YACD,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,wBAAoD,CAAC;YACzF,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAoC,CAAC;YACjE,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;YAC1C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;YAC/B,MAAM,mBAAmB,GAAqC,EAAE,CAAC;YACjE,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACtB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9B,mBAAmB,CAAC,OAAO,CAAC,GAAG,MAAM,cAAc,CAAC,YAAY,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;aAC5F;YACD,IAAI,CAAC,MAAM,CAAC,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,CAAC,CAAC;QACzD,CAAC;KAAA;IAED;;;OAGG;IACH,UAAU;QACR,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAoC,CAAC;QACjE,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;YAC3B,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA7ED,0DA6EC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport { safelyExecute } from '../util';\nimport AssetsController from './AssetsController';\nimport { Token } from './TokenRatesController';\nimport { AssetsContractController } from './AssetsContractController';\n\nconst { BN } = require('ethereumjs-util');\n\nexport { BN };\n\n/**\n * @type TokenBalancesConfig\n *\n * Token balances controller configuration\n *\n * @property interval - Polling interval used to fetch new token balances\n * @property tokens - List of tokens to track balances for\n */\nexport interface TokenBalancesConfig extends BaseConfig {\n  interval: number;\n  tokens: Token[];\n}\n\n/**\n * @type TokenBalancesState\n *\n * Token balances controller state\n *\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport interface TokenBalancesState extends BaseState {\n  contractBalances: { [address: string]: typeof BN };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the AssetsController\n */\nexport class TokenBalancesController extends BaseController<TokenBalancesConfig, TokenBalancesState> {\n  private handle?: NodeJS.Timer;\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'TokenBalancesController';\n\n  /**\n   * List of required sibling controllers this controller needs to function\n   */\n  requiredControllers = ['AssetsContractController', 'AssetsController'];\n\n  /**\n   * Creates a TokenBalancesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<TokenBalancesConfig>, state?: Partial<TokenBalancesState>) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 180000,\n      tokens: [],\n    };\n    this.defaultState = { contractBalances: {} };\n    this.initialize();\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval used to fetch new token balances\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.updateBalances());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Updates balances for all tokens\n   *\n   * @returns Promise resolving when this operation completes\n   */\n  async updateBalances() {\n    if (this.disabled) {\n      return;\n    }\n    const assetsContract = this.context.AssetsContractController as AssetsContractController;\n    const assets = this.context.AssetsController as AssetsController;\n    const { selectedAddress } = assets.config;\n    const { tokens } = this.config;\n    const newContractBalances: { [address: string]: typeof BN } = {};\n    for (const i in tokens) {\n      const { address } = tokens[i];\n      newContractBalances[address] = await assetsContract.getBalanceOf(address, selectedAddress);\n    }\n    this.update({ contractBalances: newContractBalances });\n  }\n\n  /**\n   * Extension point called if and when this controller is composed\n   * with other controllers using a ComposableController\n   */\n  onComposed() {\n    super.onComposed();\n    const assets = this.context.AssetsController as AssetsController;\n    assets.subscribe(({ tokens }) => {\n      this.configure({ tokens });\n      this.updateBalances();\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}