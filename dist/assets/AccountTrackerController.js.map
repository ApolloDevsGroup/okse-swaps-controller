{"version":3,"file":"AccountTrackerController.js","sourceRoot":"","sources":["../../src/assets/AccountTrackerController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sDAA0E;AAE1E,kCAAiD;AAEjD,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAoC1C;;GAEG;AACH,MAAa,wBAAyB,SAAQ,wBAAyD;IAiCrG;;;;;OAKG;IACH,YAAY,MAAsC,EAAE,KAAoC;QACtF,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAjBvB;;WAEG;QACH,SAAI,GAAG,0BAA0B,CAAC;QAElC;;WAEG;QACH,wBAAmB,GAAG,CAAC,uBAAuB,CAAC,CAAC;QAmDhD;;WAEG;QACH,YAAO,GAAG,GAAS,EAAE;YACnB,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAChC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;gBAC9B,MAAM,oBAAa,CAAC,GAAS,EAAE;oBAC7B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBAC1D,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE,cAAO,CAAC,OAAO,CAAC,EAAE,CAAC;oBAClD,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,oBAAO,QAAQ,CAAE,EAAE,CAAC,CAAC;gBAC7C,CAAC,CAAA,CAAC,CAAC;aACJ;QACH,CAAC,CAAA,CAAC;QAtDA,IAAI,CAAC,aAAa,GAAG;YACnB,QAAQ,EAAE,KAAK;SAChB,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;QACrC,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAzCO,YAAY;QAClB,MAAM,EACJ,KAAK,EAAE,EAAE,UAAU,EAAE,GACtB,GAAG,IAAI,CAAC,OAAO,CAAC,qBAA8C,CAAC;QAChE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrF,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACrF,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC/B,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC/B,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,oBAAO,QAAQ,CAAE,EAAE,CAAC,CAAC;IAC7C,CAAC;IA2BD;;;;OAIG;IACH,IAAI,QAAQ,CAAC,QAAa;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,qBAA8C,CAAC;QAChF,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED;;;;OAIG;IACG,IAAI,CAAC,QAAiB;;YAC1B,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,IAAI,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,oBAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC3B,CAAC;KAAA;CAgBF;AAhGD,4DAgGC;AAED,kBAAe,wBAAwB,CAAC","sourcesContent":["import BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport PreferencesController from '../user/PreferencesController';\nimport { BNToHex, safelyExecute } from '../util';\n\nconst EthjsQuery = require('ethjs-query');\n\n/**\n * @type AccountInformation\n *\n * Account information object\n *\n * @property balance - Hex string of an account balancec in wei\n */\nexport interface AccountInformation {\n  balance: string;\n}\n\n/**\n * @type AccountTrackerConfig\n *\n * Account tracker controller configuration\n *\n * @property provider - Provider used to create a new underlying EthQuery instance\n */\nexport interface AccountTrackerConfig extends BaseConfig {\n  interval: number;\n  provider?: any;\n}\n\n/**\n * @type AccountTrackerState\n *\n * Account tracker controller state\n *\n * @property accounts - Map of addresses to account information\n */\nexport interface AccountTrackerState extends BaseState {\n  accounts: { [address: string]: AccountInformation };\n}\n\n/**\n * Controller that tracks information for all accounts in the current keychain\n */\nexport class AccountTrackerController extends BaseController<AccountTrackerConfig, AccountTrackerState> {\n  private ethjsQuery: any;\n\n  private handle?: NodeJS.Timer;\n\n  private syncAccounts() {\n    const {\n      state: { identities },\n    } = this.context.PreferencesController as PreferencesController;\n    const { accounts } = this.state;\n    const addresses = Object.keys(identities);\n    const existing = Object.keys(accounts);\n    const newAddresses = addresses.filter((address) => existing.indexOf(address) === -1);\n    const oldAddresses = existing.filter((address) => addresses.indexOf(address) === -1);\n    newAddresses.forEach((address) => {\n      accounts[address] = { balance: '0x0' };\n    });\n    oldAddresses.forEach((address) => {\n      delete accounts[address];\n    });\n    this.update({ accounts: { ...accounts } });\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'AccountTrackerController';\n\n  /**\n   * List of required sibling controllers this controller needs to function\n   */\n  requiredControllers = ['PreferencesController'];\n\n  /**\n   * Creates an AccountTracker instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<AccountTrackerConfig>, state?: Partial<AccountTrackerState>) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: 10000,\n    };\n    this.defaultState = { accounts: {} };\n    this.initialize();\n  }\n\n  /**\n   * Sets a new provider\n   *\n   * @param provider - Provider used to create a new underlying EthQuery instance\n   */\n  set provider(provider: any) {\n    this.ethjsQuery = new EthjsQuery(provider);\n  }\n\n  /**\n   * Extension point called if and when this controller is composed\n   * with other controllers using a ComposableController\n   */\n  onComposed() {\n    super.onComposed();\n    const preferences = this.context.PreferencesController as PreferencesController;\n    preferences.subscribe(this.refresh);\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval trigger a 'refresh'\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.refresh());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Refreshes all accounts in the current keychain\n   */\n  refresh = async () => {\n    this.syncAccounts();\n    const { accounts } = this.state;\n    for (const address in accounts) {\n      await safelyExecute(async () => {\n        const balance = await this.ethjsQuery.getBalance(address);\n        accounts[address] = { balance: BNToHex(balance) };\n        this.update({ accounts: { ...accounts } });\n      });\n    }\n  };\n}\n\nexport default AccountTrackerController;\n"]}