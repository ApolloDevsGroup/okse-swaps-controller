{"version":3,"file":"AssetsDetectionController.js","sourceRoot":"","sources":["../../src/assets/AssetsDetectionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { toChecksumAddress } from 'ethereumjs-util';\nimport BaseController, { BaseConfig, BaseState } from '../BaseController';\nimport NetworkController, { NetworkType } from '../network/NetworkController';\nimport PreferencesController from '../user/PreferencesController';\nimport { safelyExecute, timeoutFetch } from '../util';\nimport AssetsContractController from './AssetsContractController';\nimport { Token } from './TokenRatesController';\n\nimport AssetsController from './AssetsController';\n\nconst contractMap = require('@metamask/contract-metadata');\n\nconst DEFAULT_INTERVAL = 180000;\nconst MAINNET = 'mainnet';\n\n/**\n * @type ApiCollectibleResponse\n *\n * Collectible object coming from OpenSea api\n *\n * @property token_id - The collectible identifier\n * @property image_original_url - URI of collectible image associated with this collectible\n * @property name - The collectible name\n * @property description - The collectible description\n * @property assetContract - The collectible contract basic information, in this case the address\n */\nexport interface ApiCollectibleResponse {\n  token_id: string;\n  image_original_url: string;\n  name: string;\n  description: string;\n  asset_contract: { [address: string]: string };\n}\n\n/**\n * @type AssetsConfig\n *\n * Assets controller configuration\n *\n * @property interval - Polling interval used to fetch new token rates\n * @property networkType - Network type ID as per net_version\n * @property selectedAddress - Vault selected address\n * @property tokens - List of tokens associated with the active vault\n */\nexport interface AssetsDetectionConfig extends BaseConfig {\n  interval: number;\n  networkType: NetworkType;\n  selectedAddress: string;\n  tokens: Token[];\n}\n\n/**\n * Controller that passively polls on a set interval for assets auto detection\n */\nexport class AssetsDetectionController extends BaseController<AssetsDetectionConfig, BaseState> {\n  private handle?: NodeJS.Timer;\n\n  private getOwnerCollectiblesApi(address: string) {\n    return `https://api.opensea.io/api/v1/assets?owner=${address}&limit=300`;\n  }\n\n  private async getOwnerCollectibles() {\n    const { selectedAddress } = this.config;\n    const api = this.getOwnerCollectiblesApi(selectedAddress);\n    const assetsController = this.context.AssetsController as AssetsController;\n    let response;\n    try {\n      /* istanbul ignore if */\n      if (assetsController.openSeaApiKey) {\n        response = await timeoutFetch(api, { headers: { 'X-API-KEY': assetsController.openSeaApiKey } }, 15000);\n      } else {\n        response = await timeoutFetch(api, {}, 15000);\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return [];\n    }\n    const collectibles = response?.assets || [];\n    return collectibles;\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'AssetsDetectionController';\n\n  /**\n   * List of required sibling controllers this controller needs to function\n   */\n  requiredControllers = ['AssetsContractController', 'AssetsController', 'NetworkController', 'PreferencesController'];\n\n  /**\n   * Creates a AssetsDetectionController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<AssetsDetectionConfig>, state?: Partial<BaseState>) {\n    super(config, state);\n    this.defaultConfig = {\n      interval: DEFAULT_INTERVAL,\n      networkType: 'mainnet',\n      selectedAddress: '',\n      tokens: [],\n    };\n    this.initialize();\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval\n   *\n   * @param interval - Polling interval used to auto detect assets\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await this.detectAssets();\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Checks whether network is mainnet or not\n   *\n   * @returns - Whether current network is mainnet\n   */\n  isMainnet() {\n    if (this.config.networkType !== MAINNET || this.disabled) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Detect assets owned by current account on mainnet\n   */\n  async detectAssets() {\n    /* istanbul ignore if */\n    if (!this.isMainnet()) {\n      return;\n    }\n    this.detectTokens();\n    this.detectCollectibles();\n  }\n\n  /**\n   * Triggers asset ERC20 token auto detection for each contract address in contract metadata on mainnet\n   */\n  async detectTokens() {\n    /* istanbul ignore if */\n    if (!this.isMainnet()) {\n      return;\n    }\n    const tokensAddresses = this.config.tokens.filter(/* istanbul ignore next*/ (token) => token.address);\n    const tokensToDetect: string[] = [];\n    for (const address in contractMap) {\n      const contract = contractMap[address];\n      if (contract.erc20 && !(address in tokensAddresses)) {\n        tokensToDetect.push(address);\n      }\n    }\n\n    const assetsContractController = this.context.AssetsContractController as AssetsContractController;\n    const { selectedAddress } = this.config;\n    /* istanbul ignore else */\n    if (!selectedAddress) {\n      return;\n    }\n    await safelyExecute(async () => {\n      const balances = await assetsContractController.getBalancesInSingleCall(selectedAddress, tokensToDetect);\n      const assetsController = this.context.AssetsController as AssetsController;\n      const { ignoredTokens } = assetsController.state;\n      for (const tokenAddress in balances) {\n        let ignored;\n        /* istanbul ignore else */\n        if (ignoredTokens.length) {\n          ignored = ignoredTokens.find((token) => token.address === toChecksumAddress(tokenAddress));\n        }\n        if (!ignored) {\n          await assetsController.addToken(\n            tokenAddress,\n            contractMap[tokenAddress].symbol,\n            contractMap[tokenAddress].decimals,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Triggers asset ERC721 token auto detection on mainnet\n   * adding new collectibles and removing not owned collectibles\n   */\n  async detectCollectibles() {\n    /* istanbul ignore if */\n    if (!this.isMainnet()) {\n      return;\n    }\n    const { selectedAddress } = this.config;\n    /* istanbul ignore else */\n    if (!selectedAddress) {\n      return;\n    }\n    await safelyExecute(async () => {\n      const assetsController = this.context.AssetsController as AssetsController;\n      const { ignoredCollectibles } = assetsController.state;\n      let collectiblesToRemove = assetsController.state.collectibles;\n      const apiCollectibles = await this.getOwnerCollectibles();\n      const addCollectiblesPromises = apiCollectibles.map(async (collectible: ApiCollectibleResponse) => {\n        const {\n          token_id,\n          image_original_url,\n          name,\n          description,\n          asset_contract: { address },\n        } = collectible;\n\n        let ignored;\n        /* istanbul ignore else */\n        if (ignoredCollectibles.length) {\n          ignored = ignoredCollectibles.find((c) => {\n            /* istanbul ignore next */\n            return c.address === toChecksumAddress(address) && c.tokenId === Number(token_id);\n          });\n        }\n        /* istanbul ignore else */\n        if (!ignored) {\n          await assetsController.addCollectible(\n            address,\n            Number(token_id),\n            {\n              description,\n              image: image_original_url,\n              name,\n            },\n            true,\n          );\n        }\n        collectiblesToRemove = collectiblesToRemove.filter((c) => {\n          return !(c.tokenId === Number(token_id) && c.address === toChecksumAddress(address));\n        });\n      });\n      await Promise.all(addCollectiblesPromises);\n      collectiblesToRemove.forEach(({ address, tokenId }) => {\n        assetsController.removeCollectible(address, tokenId);\n      });\n    });\n  }\n\n  /**\n   * Extension point called if and when this controller is composed\n   * with other controllers using a ComposableController\n   */\n  onComposed() {\n    super.onComposed();\n    const preferences = this.context.PreferencesController as PreferencesController;\n    const network = this.context.NetworkController as NetworkController;\n    const assets = this.context.AssetsController as AssetsController;\n    assets.subscribe(({ tokens }) => {\n      this.configure({ tokens });\n    });\n    preferences.subscribe(({ selectedAddress }) => {\n      const actualSelectedAddress = this.config.selectedAddress;\n      if (selectedAddress !== actualSelectedAddress) {\n        this.configure({ selectedAddress });\n        this.detectAssets();\n      }\n    });\n    network.subscribe(({ provider }) => {\n      this.configure({ networkType: provider.type });\n    });\n  }\n}\n\nexport default AssetsDetectionController;\n"]}