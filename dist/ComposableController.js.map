{"version":3,"file":"ComposableController.js","sourceRoot":"","sources":["../src/ComposableController.ts"],"names":[],"mappings":";;;AAAA,qDAA8C;AAc9C;;GAEG;AACH,MAAa,oBAAqB,SAAQ,wBAAwB;IAehE;;;;;OAKG;IACH,YAAY,cAA8B,EAAE,EAAE,YAAkB;QAC9D,KAAK,EAAE,CAAC;QAnBF,wBAAmB,GAAmB,EAAE,CAAC;QAEjD;;WAEG;QACH,YAAO,GAA2B,EAAE,CAAC;QAErC;;WAEG;QACH,SAAI,GAAG,sBAAsB,CAAC;QAU5B,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACH,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,IAAI,WAAW,CAAC,WAA2B;QACzC,IAAI,CAAC,mBAAmB,GAAG,WAAW,CAAC;QACvC,MAAM,YAAY,GAAQ,EAAE,CAAC;QAC7B,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACjC,MAAM,EAAE,IAAI,EAAE,GAAG,UAAU,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC;YAChC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAClC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YACxF,YAAY,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC;YACtC,UAAU,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC7B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACjC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;OAMG;IACH,IAAI,SAAS;QACX,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,SAAS,mCAAQ,SAAS,GAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAE,CAAC;SAC3D;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AA5ED,oDA4EC;AAED,kBAAe,oBAAoB,CAAC","sourcesContent":["import BaseController from './BaseController';\n\n/**\n * Child controller instances keyed by controller name\n */\nexport interface ChildControllerContext {\n  [key: string]: BaseController<any, any>;\n}\n\n/**\n * List of child controller instances\n */\nexport type ControllerList = BaseController<any, any>[];\n\n/**\n * Controller that can be used to compose multiple controllers together\n */\nexport class ComposableController extends BaseController<any, any> {\n  private cachedState: any;\n\n  private internalControllers: ControllerList = [];\n\n  /**\n   * Map of stores to compose together\n   */\n  context: ChildControllerContext = {};\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'ComposableController';\n\n  /**\n   * Creates a ComposableController instance\n   *\n   * @param controllers - Map of names to controller instances\n   * @param initialState - Initial state keyed by child controller name\n   */\n  constructor(controllers: ControllerList = [], initialState?: any) {\n    super();\n    this.initialize();\n    this.cachedState = initialState;\n    this.controllers = controllers;\n    this.cachedState = undefined;\n  }\n\n  /**\n   * Get current list of child composed store instances\n   *\n   * @returns - List of names to controller instances\n   */\n  get controllers() {\n    return this.internalControllers;\n  }\n\n  /**\n   * Set new list of controller instances\n   *\n   * @param controllers - List of names to controller instsances\n   */\n  set controllers(controllers: ControllerList) {\n    this.internalControllers = controllers;\n    const initialState: any = {};\n    controllers.forEach((controller) => {\n      const { name } = controller;\n      this.context[name] = controller;\n      controller.context = this.context;\n      this.cachedState && this.cachedState[name] && controller.update(this.cachedState[name]);\n      initialState[name] = controller.state;\n      controller.subscribe((state) => {\n        this.update({ [name]: state });\n      });\n    });\n    controllers.forEach((controller) => {\n      controller.onComposed();\n    });\n    this.update(initialState, true);\n  }\n\n  /**\n   * Flat state representation, one that isn't keyed\n   * of controller name. Instead, all child controller state is merged\n   * together into a single, flat object.\n   *\n   * @returns - Merged state representation of all child controllers\n   */\n  get flatState() {\n    let flatState = {};\n    for (const name in this.context) {\n      flatState = { ...flatState, ...this.context[name].state };\n    }\n    return flatState;\n  }\n}\n\nexport default ComposableController;\n"]}